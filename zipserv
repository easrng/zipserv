#!/usr/bin/env python3
from http.server import BaseHTTPRequestHandler, ThreadingHTTPServer
import argparse, socket, json
from zipfile import ZipFile
import mimetypes

parser = argparse.ArgumentParser(description='Serve a site from a zip file.')
parser.add_argument('--file', '-f', help='Zip file to serve from', default="site.zip")
parser.add_argument('--port', '-p', help='Port to listen on', default="8080", type=int)
parser.add_argument('--address', '-b', help='Hostname or IP to bind to', default="::")
args = parser.parse_args()
hostName = args.address
serverPort = args.port
zip = ZipFile(args.file, 'r')

class ZipServer(BaseHTTPRequestHandler):
    def do_GET(self):
        if(self.path=="/"):
            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            files=[]
            for info in zip.infolist(): 
                files.append({"name":info.filename,"size":info.file_size})
            return self.wfile.write(bytes(json.dumps(files),"utf-8"))
        fi=None
        try:
            fi=zip.getinfo(self.path[1:])
        except:
            pass;
        if(fi is not None):
            self.send_response(200)
            self.send_header("Content-type", mimetypes.guess_type(fi.filename))
            self.end_headers()
            return self.wfile.write(zip.read(fi.filename))
        self.send_response(404)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
        self.wfile.write(bytes("404 - Not Found","utf-8"))

class ThreadingHTTPServerV6(ThreadingHTTPServer):
    address_family = socket.AF_INET6

if __name__ == "__main__":        
    webServer = ThreadingHTTPServerV6((hostName, serverPort), ZipServer)
    print("Server is listening")

    try:
        webServer.serve_forever()
    except KeyboardInterrupt:
        pass

    webServer.server_close()
    print("Server stopped.")
